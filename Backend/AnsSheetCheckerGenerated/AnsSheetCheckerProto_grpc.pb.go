// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: AnsSheetCheckerProto.proto

package AnsSheetCheckerGenerated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnsSheetCheckerClient is the client API for AnsSheetChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnsSheetCheckerClient interface {
	AddSubmission(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error)
	GetSubmissionById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Submission, error)
	GetAllSubmissionsByIds(ctx context.Context, in *ByIdsRequest, opts ...grpc.CallOption) (*SubmissionsArray, error)
	GetAllSubmissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SubmissionsArray, error)
	UpdateSubmissionById(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error)
	DeleteSubmissionById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUrlRequestCounter(ctx context.Context, in *GetUrlRequestCounterRequest, opts ...grpc.CallOption) (*GetUrlRequestCounterResponse, error)
	DownloadFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AnsSheetChecker_DownloadFilesClient, error)
	UploadFiles(ctx context.Context, opts ...grpc.CallOption) (AnsSheetChecker_UploadFilesClient, error)
}

type ansSheetCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnsSheetCheckerClient(cc grpc.ClientConnInterface) AnsSheetCheckerClient {
	return &ansSheetCheckerClient{cc}
}

func (c *ansSheetCheckerClient) AddSubmission(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/AnsSheetCheckerGenerated.AnsSheetChecker/AddSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansSheetCheckerClient) GetSubmissionById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/AnsSheetCheckerGenerated.AnsSheetChecker/GetSubmissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansSheetCheckerClient) GetAllSubmissionsByIds(ctx context.Context, in *ByIdsRequest, opts ...grpc.CallOption) (*SubmissionsArray, error) {
	out := new(SubmissionsArray)
	err := c.cc.Invoke(ctx, "/AnsSheetCheckerGenerated.AnsSheetChecker/GetAllSubmissionsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansSheetCheckerClient) GetAllSubmissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SubmissionsArray, error) {
	out := new(SubmissionsArray)
	err := c.cc.Invoke(ctx, "/AnsSheetCheckerGenerated.AnsSheetChecker/GetAllSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansSheetCheckerClient) UpdateSubmissionById(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/AnsSheetCheckerGenerated.AnsSheetChecker/UpdateSubmissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansSheetCheckerClient) DeleteSubmissionById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AnsSheetCheckerGenerated.AnsSheetChecker/DeleteSubmissionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansSheetCheckerClient) GetUrlRequestCounter(ctx context.Context, in *GetUrlRequestCounterRequest, opts ...grpc.CallOption) (*GetUrlRequestCounterResponse, error) {
	out := new(GetUrlRequestCounterResponse)
	err := c.cc.Invoke(ctx, "/AnsSheetCheckerGenerated.AnsSheetChecker/GetUrlRequestCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansSheetCheckerClient) DownloadFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AnsSheetChecker_DownloadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnsSheetChecker_ServiceDesc.Streams[0], "/AnsSheetCheckerGenerated.AnsSheetChecker/DownloadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansSheetCheckerDownloadFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsSheetChecker_DownloadFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type ansSheetCheckerDownloadFilesClient struct {
	grpc.ClientStream
}

func (x *ansSheetCheckerDownloadFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ansSheetCheckerClient) UploadFiles(ctx context.Context, opts ...grpc.CallOption) (AnsSheetChecker_UploadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnsSheetChecker_ServiceDesc.Streams[1], "/AnsSheetCheckerGenerated.AnsSheetChecker/uploadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansSheetCheckerUploadFilesClient{stream}
	return x, nil
}

type AnsSheetChecker_UploadFilesClient interface {
	Send(*File) error
	CloseAndRecv() (*FileArray, error)
	grpc.ClientStream
}

type ansSheetCheckerUploadFilesClient struct {
	grpc.ClientStream
}

func (x *ansSheetCheckerUploadFilesClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ansSheetCheckerUploadFilesClient) CloseAndRecv() (*FileArray, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileArray)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnsSheetCheckerServer is the server API for AnsSheetChecker service.
// All implementations must embed UnimplementedAnsSheetCheckerServer
// for forward compatibility
type AnsSheetCheckerServer interface {
	AddSubmission(context.Context, *Submission) (*Submission, error)
	GetSubmissionById(context.Context, *ByIdRequest) (*Submission, error)
	GetAllSubmissionsByIds(context.Context, *ByIdsRequest) (*SubmissionsArray, error)
	GetAllSubmissions(context.Context, *Empty) (*SubmissionsArray, error)
	UpdateSubmissionById(context.Context, *Submission) (*Submission, error)
	DeleteSubmissionById(context.Context, *ByIdRequest) (*Empty, error)
	GetUrlRequestCounter(context.Context, *GetUrlRequestCounterRequest) (*GetUrlRequestCounterResponse, error)
	DownloadFiles(*Empty, AnsSheetChecker_DownloadFilesServer) error
	UploadFiles(AnsSheetChecker_UploadFilesServer) error
	mustEmbedUnimplementedAnsSheetCheckerServer()
}

// UnimplementedAnsSheetCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedAnsSheetCheckerServer struct {
}

func (UnimplementedAnsSheetCheckerServer) AddSubmission(context.Context, *Submission) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubmission not implemented")
}
func (UnimplementedAnsSheetCheckerServer) GetSubmissionById(context.Context, *ByIdRequest) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionById not implemented")
}
func (UnimplementedAnsSheetCheckerServer) GetAllSubmissionsByIds(context.Context, *ByIdsRequest) (*SubmissionsArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubmissionsByIds not implemented")
}
func (UnimplementedAnsSheetCheckerServer) GetAllSubmissions(context.Context, *Empty) (*SubmissionsArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubmissions not implemented")
}
func (UnimplementedAnsSheetCheckerServer) UpdateSubmissionById(context.Context, *Submission) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmissionById not implemented")
}
func (UnimplementedAnsSheetCheckerServer) DeleteSubmissionById(context.Context, *ByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubmissionById not implemented")
}
func (UnimplementedAnsSheetCheckerServer) GetUrlRequestCounter(context.Context, *GetUrlRequestCounterRequest) (*GetUrlRequestCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlRequestCounter not implemented")
}
func (UnimplementedAnsSheetCheckerServer) DownloadFiles(*Empty, AnsSheetChecker_DownloadFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFiles not implemented")
}
func (UnimplementedAnsSheetCheckerServer) UploadFiles(AnsSheetChecker_UploadFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedAnsSheetCheckerServer) mustEmbedUnimplementedAnsSheetCheckerServer() {}

// UnsafeAnsSheetCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnsSheetCheckerServer will
// result in compilation errors.
type UnsafeAnsSheetCheckerServer interface {
	mustEmbedUnimplementedAnsSheetCheckerServer()
}

func RegisterAnsSheetCheckerServer(s grpc.ServiceRegistrar, srv AnsSheetCheckerServer) {
	s.RegisterService(&AnsSheetChecker_ServiceDesc, srv)
}

func _AnsSheetChecker_AddSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsSheetCheckerServer).AddSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnsSheetCheckerGenerated.AnsSheetChecker/AddSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsSheetCheckerServer).AddSubmission(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsSheetChecker_GetSubmissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsSheetCheckerServer).GetSubmissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnsSheetCheckerGenerated.AnsSheetChecker/GetSubmissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsSheetCheckerServer).GetSubmissionById(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsSheetChecker_GetAllSubmissionsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsSheetCheckerServer).GetAllSubmissionsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnsSheetCheckerGenerated.AnsSheetChecker/GetAllSubmissionsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsSheetCheckerServer).GetAllSubmissionsByIds(ctx, req.(*ByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsSheetChecker_GetAllSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsSheetCheckerServer).GetAllSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnsSheetCheckerGenerated.AnsSheetChecker/GetAllSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsSheetCheckerServer).GetAllSubmissions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsSheetChecker_UpdateSubmissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsSheetCheckerServer).UpdateSubmissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnsSheetCheckerGenerated.AnsSheetChecker/UpdateSubmissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsSheetCheckerServer).UpdateSubmissionById(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsSheetChecker_DeleteSubmissionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsSheetCheckerServer).DeleteSubmissionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnsSheetCheckerGenerated.AnsSheetChecker/DeleteSubmissionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsSheetCheckerServer).DeleteSubmissionById(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsSheetChecker_GetUrlRequestCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequestCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsSheetCheckerServer).GetUrlRequestCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnsSheetCheckerGenerated.AnsSheetChecker/GetUrlRequestCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsSheetCheckerServer).GetUrlRequestCounter(ctx, req.(*GetUrlRequestCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnsSheetChecker_DownloadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsSheetCheckerServer).DownloadFiles(m, &ansSheetCheckerDownloadFilesServer{stream})
}

type AnsSheetChecker_DownloadFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type ansSheetCheckerDownloadFilesServer struct {
	grpc.ServerStream
}

func (x *ansSheetCheckerDownloadFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _AnsSheetChecker_UploadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnsSheetCheckerServer).UploadFiles(&ansSheetCheckerUploadFilesServer{stream})
}

type AnsSheetChecker_UploadFilesServer interface {
	SendAndClose(*FileArray) error
	Recv() (*File, error)
	grpc.ServerStream
}

type ansSheetCheckerUploadFilesServer struct {
	grpc.ServerStream
}

func (x *ansSheetCheckerUploadFilesServer) SendAndClose(m *FileArray) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ansSheetCheckerUploadFilesServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnsSheetChecker_ServiceDesc is the grpc.ServiceDesc for AnsSheetChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnsSheetChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AnsSheetCheckerGenerated.AnsSheetChecker",
	HandlerType: (*AnsSheetCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubmission",
			Handler:    _AnsSheetChecker_AddSubmission_Handler,
		},
		{
			MethodName: "GetSubmissionById",
			Handler:    _AnsSheetChecker_GetSubmissionById_Handler,
		},
		{
			MethodName: "GetAllSubmissionsByIds",
			Handler:    _AnsSheetChecker_GetAllSubmissionsByIds_Handler,
		},
		{
			MethodName: "GetAllSubmissions",
			Handler:    _AnsSheetChecker_GetAllSubmissions_Handler,
		},
		{
			MethodName: "UpdateSubmissionById",
			Handler:    _AnsSheetChecker_UpdateSubmissionById_Handler,
		},
		{
			MethodName: "DeleteSubmissionById",
			Handler:    _AnsSheetChecker_DeleteSubmissionById_Handler,
		},
		{
			MethodName: "GetUrlRequestCounter",
			Handler:    _AnsSheetChecker_GetUrlRequestCounter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFiles",
			Handler:       _AnsSheetChecker_DownloadFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "uploadFiles",
			Handler:       _AnsSheetChecker_UploadFiles_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "AnsSheetCheckerProto.proto",
}
